vi 0-memset.c
#include "main.h"
/**
* _memset - fill a block of memory with a specific value
* @s: starting address of memory to be filled
* @b: the desired value
* @n: number of bytes to be changed
Return: changed array with new value for n bytes
*/
char *_memset(char *s, char b, unsigned int n)
{
int i = 0;
for (; n > 0; i++)
{
s[i] = b;
n--;
}
return (s);
}
git add .
git commit
git push


vi 1-memcpy.c
#include "main.h"
/**
* _memcpy - a function that copies memory area
* @dest: memory where is stored
* @src: memory where is copied
* *@n: number of bytes
* Return: copied memory with byted changed
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
int r = 0;
int i = n;
for (; r < i; r++)
{
dest[r] = src[r];
n--;
}
return (dest);
}
git add .
git commit
git push


vi 2-strchr.c
#include "main.h"
/**
* _strchr - Entry point
* @s: input
* @c: input
* Return: Always 0 (Success)
*/
char *_strchr(char *s, char c)
{
int i = 0;
for (; s[i] >= '\0'; i++)
{
if (s[i] == c)
return (&s[i]);
}
return (0);
}
git add .
git commit
git push


vi 3-strspn.c
#include "main.h"
/**
* _strspn - Entry point
* @s: input
* @accept: input
* Return: Always 0 (Success)
*/
unsigned int _strspn(char *s, char *accept)
{
unsigned int n = 0;
int r;
while (*s)
{
for (r = 0; accept[r]; r++)
{
if (*s == accept[r])
{
n++;
break;
}
else if (accept[r + 1] == '\0')
return (n);
}
s++
}
return (n);
}
git add .
git commit
git push

vi 4-strpbrk.c
#include "main.h"
/**
* _strpbrk - Entry point
* @s: input
* @accept: input
* Return: Always 0 (Success)
*/
char *_strpbrk(char *s, char *accept)
{
int k;
while (*s)
{
for (k = 0; accept[k]; k++)
{
if (*s == accept[k])
return (s);
}
s++
}
return ('\0');
}
git add .
git commit
git push

vi 5-strstr.c
#include "main.h"
/**
* _strstr - Entry point
* @haystack: input
* @needle: input
* Return: Always 0 (Success)
*/
char *_strstr(char *haystack, char *needle)
{
for (; *haystack != '\0'; haystack++)
{
char *l = haystack;
char *p = needle;
while (*l == *p && *p != '\0')
{
l++;
p++;
}
if (*p == '\0')
return (haystack);
}
return (0);
}
git add .
git commit
git push

vi 7-print_chessboard.c
#include "main.h"
/**
* print_chessboard - Entry point
* @a: array
* Return: Always 0 (Success)
*/
void print_chessboard(char(*a)[8])
{
int i;
int j;
for (i = 0; i < 8; i++)
{
for (j = 0; j < 8; j++)
_putchar(a[i][j]);
_putchar('\n');
}
}
git add .
git commit
git push

vi 8-print_diagsums.c
#include "main.h"
#include <stdio.h>
/**
* print_diagsums - Entry point
* @a: input
* @size: input
* Return: Always 0 (Success)
*/
void print_diagsums(int *a, int size)
{
int sum1, sum2, y;
sum1 = 0;
sum2 = 0;
for (y = 0; y < size; y++)
{
sum1 = sum1 + a[y * size + y];
}
for (y = size - 1; y >= 0; y--)
{
sum2 += a[y * size + (size - y - 1)];
}
printf("%d, %d\n", sum1, sum2);
}
git add .
git commit
git push

vi 100-set_string.c
#include "main.h"
/**
* set_string - Sets the value of a pointer to a char
* @s: pointer to pointer
* @to: pointer char
*/
void set_string(char **s, char *to)
{
*s = to;
}
git add .
git commit
git push

vi 101-crackme_password
abc123
chmod u+x 101-crackme_password
cat > 101-crackme_password
abc123 (ctrl d)
git add .
git commit
git push
